version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: premier-erp-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: premier_erp
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-erp_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - erp-network
    command: >
      sh -c "
        if [ -d /var/lib/postgresql/data/pgdata ] && [ ! -z \"$$(ls -A /var/lib/postgresql/data/pgdata)\" ]; then
          echo 'PostgreSQL data directory exists, starting normally...'
        else
          echo 'Initializing fresh PostgreSQL database...'
          rm -rf /var/lib/postgresql/data/pgdata
        fi
        exec docker-entrypoint.sh postgres
      "

  # Premier ERP Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: premier-erp-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL= 'postgresql://neondb_owner:npg_RgYqcf8Q4vVo@ep-solitary-bar-adggyh8w-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
: postgresql://erp_user:${POSTGRES_PASSWORD:-erp_secure_password_2024}@postgres:5432/premier_erp
      PORT: 5000
      DOMAIN: demo.premiererp.io
    networks:
      - erp-network
    depends_on:
      - postgres

  # Premier ERP Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: premier-erp-frontend
    restart: unless-stopped
    networks:
      - erp-network
    depends_on:
      - backend

  # Nginx Reverse Proxy with SSL
  nginx-proxy:
    image: nginx:alpine
    container_name: premier-erp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl-certs:/etc/nginx/ssl:ro
      - certbot_webroot:/var/www/certbot:ro
    networks:
      - erp-network
    depends_on:
      - backend
      - frontend

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: premier-erp-certbot
    volumes:
      - ./ssl-certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email support@premiererp.io --agree-tos --no-eff-email -d demo.premiererp.io

volumes:
  postgres_data:
    driver: local
  certbot_webroot:
    driver: local

networks:
  erp-network:
    driver: bridge