# Premier ERP - Accounting Integration & Financial Data Flow

## Critical Integration Requirements

I need you to ensure that all financial transactions automatically flow into the accounting system and are properly interconnected. Here's what needs to be implemented:

## 1. Automatic Journal Entry Creation

### When an Invoice is Created/Updated:
```typescript
// In CreateInvoice.tsx and invoice operations
const createInvoiceWithAccounting = async (invoiceData) => {
  // 1. Create the invoice
  const invoice = await createInvoice(invoiceData);
  
  // 2. Automatically create journal entries
  const journalEntry = {
    entryNumber: `INV-${invoice.invoiceNumber}`,
    entryDate: invoice.invoiceDate,
    reference: `Invoice ${invoice.invoiceNumber}`,
    description: `Sale to ${invoice.customerName}`,
    totalDebit: invoice.totalAmount,
    totalCredit: invoice.totalAmount,
    status: 'posted'
  };
  
  // 3. Create journal entry lines
  const journalLines = [
    {
      // Debit: Accounts Receivable
      accountId: ACCOUNTS_RECEIVABLE_ID,
      debitAmount: invoice.totalAmount,
      creditAmount: 0,
      description: `Invoice ${invoice.invoiceNumber} - ${invoice.customerName}`
    },
    {
      // Credit: Sales Revenue
      accountId: SALES_REVENUE_ID,
      debitAmount: 0,
      creditAmount: invoice.subtotal,
      description: `Sales revenue - Invoice ${invoice.invoiceNumber}`
    },
    {
      // Credit: Tax Payable (if applicable)
      accountId: TAX_PAYABLE_ID,
      debitAmount: 0,
      creditAmount: invoice.taxAmount,
      description: `Tax on Invoice ${invoice.invoiceNumber}`
    }
  ];
};
```

### When a Payment is Received:
```typescript
// In customer payments
const recordPayment = async (paymentData) => {
  // 1. Record the payment
  const payment = await createCustomerPayment(paymentData);
  
  // 2. Create journal entries
  const journalEntry = {
    entryNumber: `PAY-${payment.id}`,
    entryDate: payment.paymentDate,
    reference: payment.reference,
    description: `Payment from ${payment.customerName}`,
    totalDebit: payment.amount,
    totalCredit: payment.amount
  };
  
  const journalLines = [
    {
      // Debit: Cash/Bank
      accountId: CASH_ACCOUNT_ID,
      debitAmount: payment.amount,
      creditAmount: 0,
      description: `Payment received - ${payment.reference}`
    },
    {
      // Credit: Accounts Receivable
      accountId: ACCOUNTS_RECEIVABLE_ID,
      debitAmount: 0,
      creditAmount: payment.amount,
      description: `Payment against A/R - ${payment.customerName}`
    }
  ];
};
```

### When an Expense is Recorded:
```typescript
// In Expenses.tsx
const createExpenseWithAccounting = async (expenseData) => {
  // 1. Create the expense
  const expense = await createExpense(expenseData);
  
  // 2. Create journal entries
  const journalEntry = {
    entryNumber: `EXP-${expense.id}`,
    entryDate: expense.date,
    reference: expense.vendor || 'General Expense',
    description: expense.description,
    totalDebit: expense.amount,
    totalCredit: expense.amount
  };
  
  const journalLines = [
    {
      // Debit: Expense Account
      accountId: getExpenseAccountId(expense.category),
      debitAmount: expense.amount,
      creditAmount: 0,
      description: expense.description
    },
    {
      // Credit: Cash/Accounts Payable
      accountId: CASH_ACCOUNT_ID, // or ACCOUNTS_PAYABLE_ID if on credit
      debitAmount: 0,
      creditAmount: expense.amount,
      description: `Payment to ${expense.vendor}`
    }
  ];
};
```

## 2. Backend API Enhancements

Add these endpoints to `server/index.ts`:

```typescript
// Journal Entries API
app.get('/api/accounting/journal-entries', requireAuth, async (req, res) => {
  // Fetch all journal entries with account details
});

app.post('/api/accounting/journal-entries', requireAuth, async (req, res) => {
  // Create journal entry with lines
});

app.get('/api/accounting/trial-balance', requireAuth, async (req, res) => {
  // Calculate trial balance from all journal entries
});

app.get('/api/accounting/profit-loss', requireAuth, async (req, res) => {
  // Generate P&L report from revenue/expense accounts
});

app.get('/api/accounting/balance-sheet', requireAuth, async (req, res) => {
  // Generate balance sheet from asset/liability/equity accounts
});

app.get('/api/accounting/customer-balances', requireAuth, async (req, res) => {
  // Calculate outstanding customer balances
});

app.get('/api/accounting/cash-flow', requireAuth, async (req, res) => {
  // Generate cash flow statement
});
```

## 3. Enhanced Accounting.tsx Page

```typescript
// Accounting.tsx should include these tabs:
const AccountingTabs = [
  {
    id: 'overview',
    label: 'Financial Overview',
    component: <FinancialOverview />
  },
  {
    id: 'journal-entries',
    label: 'Journal Entries',
    component: <JournalEntriesTable />
  },
  {
    id: 'trial-balance',
    label: 'Trial Balance',
    component: <TrialBalance />
  },
  {
    id: 'profit-loss',
    label: 'Profit & Loss',
    component: <ProfitLossStatement />
  },
  {
    id: 'balance-sheet',
    label: 'Balance Sheet',
    component: <BalanceSheet />
  },
  {
    id: 'customer-balances',
    label: 'Customer Balances',
    component: <CustomerBalances />
  },
  {
    id: 'chart-of-accounts',
    label: 'Chart of Accounts',
    component: <ChartOfAccounts />
  }
];
```

## 4. Financial Reports Integration

### In Dashboard.tsx - Add Financial Summary:
```typescript
const FinancialSummary = () => {
  const { data: financials } = useQuery({
    queryKey: ['dashboard-financials'],
    queryFn: () => fetch('/api/accounting/summary').then(r => r.json())
  });

  return (
    <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
      <Card>
        <CardContent className="p-4">
          <div className="text-sm text-gray-600">Total Revenue</div>
          <div className="text-2xl font-bold text-green-600">
            ${financials?.totalRevenue?.toLocaleString()}
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardContent className="p-4">
          <div className="text-sm text-gray-600">Total Expenses</div>
          <div className="text-2xl font-bold text-red-600">
            ${financials?.totalExpenses?.toLocaleString()}
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardContent className="p-4">
          <div className="text-sm text-gray-600">Net Profit</div>
          <div className="text-2xl font-bold text-blue-600">
            ${financials?.netProfit?.toLocaleString()}
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardContent className="p-4">
          <div className="text-sm text-gray-600">Outstanding A/R</div>
          <div className="text-2xl font-bold text-orange-600">
            ${financials?.outstandingAR?.toLocaleString()}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
```

## 5. Cross-Module Navigation

### Add "View in Accounting" buttons:
```typescript
// In InvoiceHistory.tsx
const ViewInAccountingButton = ({ invoiceId }) => (
  <Button 
    variant="outline" 
    size="sm"
    onClick={() => navigate(`/accounting?filter=invoice-${invoiceId}`)}
  >
    View in Accounting
  </Button>
);

// In Expenses.tsx
const ViewInAccountingButton = ({ expenseId }) => (
  <Button 
    variant="outline" 
    size="sm"
    onClick={() => navigate(`/accounting?filter=expense-${expenseId}`)}
  >
    View Journal Entry
  </Button>
);
```

## 6. Real-time Updates

### Ensure accounting data updates when:
- New invoice is created → Journal entry auto-created
- Payment is received → A/R balance updated
- Expense is recorded → Cash balance updated
- Purchase order is received → Inventory and A/P updated

## 7. Chart of Accounts Setup

```typescript
// Default chart of accounts for chemical manufacturing
const defaultChartOfAccounts = [
  // Assets
  { code: '1100', name: 'Cash', type: 'Asset' },
  { code: '1200', name: 'Accounts Receivable', type: 'Asset' },
  { code: '1300', name: 'Inventory - Raw Materials', type: 'Asset' },
  { code: '1310', name: 'Inventory - Finished Goods', type: 'Asset' },
  { code: '1500', name: 'Equipment', type: 'Asset' },
  
  // Liabilities
  { code: '2100', name: 'Accounts Payable', type: 'Liability' },
  { code: '2200', name: 'Tax Payable', type: 'Liability' },
  { code: '2300', name: 'Accrued Expenses', type: 'Liability' },
  
  // Equity
  { code: '3100', name: 'Owner Equity', type: 'Equity' },
  { code: '3200', name: 'Retained Earnings', type: 'Equity' },
  
  // Revenue
  { code: '4100', name: 'Chemical Sales Revenue', type: 'Revenue' },
  { code: '4200', name: 'Service Revenue', type: 'Revenue' },
  
  // Expenses
  { code: '5100', name: 'Cost of Goods Sold', type: 'Expense' },
  { code: '5200', name: 'Raw Material Costs', type: 'Expense' },
  { code: '5300', name: 'Labor Costs', type: 'Expense' },
  { code: '6100', name: 'Office Expenses', type: 'Expense' },
  { code: '6200', name: 'Marketing Expenses', type: 'Expense' },
  { code: '6300', name: 'Utilities', type: 'Expense' }
];
```

## 8. Testing Checklist

After implementation, test these flows:
1. ✅ Create invoice → Check accounting journal entries
2. ✅ Record payment → Verify A/R balance decrease
3. ✅ Add expense → Confirm journal entry creation
4. ✅ View invoice from accounting page
5. ✅ Generate financial reports with real data
6. ✅ Navigate between modules seamlessly
7. ✅ Dashboard shows updated financial summary

## Expected Result:
- Every financial transaction automatically creates proper journal entries
- Accounting tab shows all financial activity from across the system
- Real-time financial reporting with accurate balances
- Seamless navigation between operational and financial views
- Professional financial statements (P&L, Balance Sheet, Cash Flow)

Please implement these integrations so that the accounting system becomes the central hub for all financial data in the ERP system.